package mz800.flappy;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * Main application window.
 * 
 * @author Petr Slechta
 */
class Window extends JFrame {

    private Keyboard keyboard = Keyboard.getInstance();
    private VRAM vram;

    private class MyCanvas extends JPanel {

        @Override
        public void paint(Graphics g) {
            g.drawImage(vram.getImage(), 0, 0, this);
        }
    }

    /**
     * Creates new form Scene
     */
    private Window(VRAM vram, GraphicsConfiguration gc) {
        super(gc);
        if (gc != null) {
            setUndecorated(true);
        }
        this.vram = vram;
        initComponents();
        MyCanvas c = new MyCanvas();
        c.setBackground(Color.BLACK);
        BufferedImage img = vram.getImage();
        c.setMinimumSize(new Dimension(img.getWidth(), img.getHeight()));
        c.setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));
        c.setMaximumSize(new Dimension(img.getWidth(), img.getHeight()));
        getContentPane().remove(mainPanel);
        c.setLayout(null);
        getContentPane().add(c);
        getContentPane().setBackground(Color.BLACK);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Flappy");
        setBackground(new java.awt.Color(0, 0, 0));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        mainPanel.setLayout(null);
        getContentPane().add(mainPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        keyboard.keyDown(evt.getKeyCode());
        evt.consume();
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        keyboard.keyUp(evt.getKeyCode());
        evt.consume();
    }//GEN-LAST:event_formKeyReleased

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped
        keyboard.keyPressed(evt.getKeyChar());
        evt.consume();
    }//GEN-LAST:event_formKeyTyped

    static Window createWindow(VRAM vram) {
        final Window me = new Window(vram, null);
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                me.setVisible(true);
            }
        });
        return me;
    }

    static Window createFullScreen(VRAM vram) {
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice device = env.getDefaultScreenDevice();
        GraphicsConfiguration gc = device.getDefaultConfiguration();
        final Window me = new Window(vram, gc);
        me.setCursor(emptyCursor());
        device.setFullScreenWindow(me);
        if (device.isDisplayChangeSupported()) {
            chooseBestDisplayMode(device);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                me.setVisible(true);
            }
        });
        return me;
    }

    private static Cursor emptyCursor() {
        // Transparent 16 x 16 pixel cursor image.
        BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
        // Create a new blank cursor.
        Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
                cursorImg, new Point(0, 0), "blank cursor");
        return blankCursor;
    }

    private static void chooseBestDisplayMode(GraphicsDevice device) {
        final int SCRWIDTH = 640;
        final int SCRHEIGHT = 400;
        int widthDiff = Integer.MAX_VALUE;
        int heightDiff = Integer.MAX_VALUE;
        int bitDepth = 0;
        int frequency = 0;

        DisplayMode[] modes = device.getDisplayModes();
        int best = -1;
        for (int i = 0, maxi = modes.length; i < maxi; i++) {
            DisplayMode dm = modes[i];
            if (Main.verbose) {
                printMode(i, dm);
            }
            if (dm.getBitDepth() != DisplayMode.BIT_DEPTH_MULTI && dm.getBitDepth() < 4) {
                continue;
            }
            if (dm.getWidth() < SCRWIDTH || dm.getHeight() < SCRHEIGHT) {
                continue;
            }

            if (dm.getHeight() - SCRHEIGHT < heightDiff) {
                widthDiff = dm.getWidth() - SCRWIDTH;
                heightDiff = dm.getHeight() - SCRHEIGHT;
                bitDepth = dm.getBitDepth();
                frequency = dm.getRefreshRate();
                best = i;
            } else if (dm.getHeight() - SCRHEIGHT == heightDiff) {
                if (dm.getWidth() - SCRWIDTH < widthDiff) {
                    widthDiff = dm.getWidth() - SCRWIDTH;
                    bitDepth = dm.getBitDepth();
                    frequency = dm.getRefreshRate();
                    best = i;
                } else if (dm.getWidth() - SCRWIDTH == widthDiff) {
                    if (dm.getBitDepth() > bitDepth) {
                        bitDepth = dm.getBitDepth();
                        frequency = dm.getRefreshRate();
                        best = i;
                    } else if (dm.getBitDepth() == bitDepth) {
                        if (dm.getRefreshRate() > frequency) {
                            frequency = dm.getRefreshRate();
                            best = i;
                        }
                    }
                }
            }
        }

        if (best >= 0) {
            if (Main.verbose) {
                System.out.println("selected mode: " + best);
            }
            device.setDisplayMode(modes[best]);
        }
    }

    private static void printMode(int no, DisplayMode dm) {
        System.out.println("mode " + no + ": " + dm.getWidth() + "x" + dm.getHeight() + "x" + dm.getBitDepth() + "@" + dm.getRefreshRate());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
}
